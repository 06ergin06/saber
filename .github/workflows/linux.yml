name: Build for Linux

on:
  # Enable manual run
  workflow_dispatch:
  push:
    tags:
      - '**'

env:
  project-id: com.adilhanney.saber

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      buildName: ${{ steps.get_version.outputs.buildName }}
      buildNumber: ${{ steps.get_version.outputs.buildNumber }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          # get buildName from lib/data/version.dart
          buildName=$(grep -oP "(?<=buildName = ').*(?=')" lib/data/version.dart)
          echo "buildName=$buildName" >> $GITHUB_OUTPUT

          # get buildNumber from lib/data/version.dart
          buildNumber=$(grep -oP '(?<=buildNumber = ).*(?=;)' lib/data/version.dart)
          echo "buildNumber=$buildNumber" >> $GITHUB_OUTPUT

  build-flutter-app:
    name: Build Flutter app
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove unneeded files
        run: |
          rm -rf android
          rm -rf assets_raw
          rm -rf installers
          rm -rf integration_test
          rm -rf ios
          rm -rf macos
          rm -rf metadata
          rm -rf test
          rm -rf windows

      - name: Install Flutter dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev libsecret-1-dev libjsoncpp-dev

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            build
          key: ${{ runner.OS }}-saber-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/*.dart') }}
          restore-keys: |
            ${{ runner.OS }}-saber-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:'

      - run: flutter pub get

      - name: Build Linux portable
        run: |
          flutter build linux \
            --dart-define=DIRTY=$DIRTY
        env:
          DIRTY: ${{ !startsWith(github.ref, 'refs/tags/') }}

      - name: Compress Flutter build
        id: compress
        run: |
          archiveName="Saber_v${{ needs.get-version.outputs.buildName }}.tar.gz"
          echo "archiveName=$archiveName" >> $GITHUB_OUTPUT

          mkdir -p AppDir
          mv build/linux/x64/release/bundle/* AppDir
          chmod +x AppDir/saber

          install -Dm644 flatpak/com.adilhanney.saber.metainfo.xml -t AppDir/share/metainfo/
          install -Dm644 flatpak/com.adilhanney.saber.metainfo.xml -t AppDir/usr/share/metainfo/

          install -Dm644 assets/icon/resized/icon-512x512.png AppDir/share/icons/hicolor/512x512/apps/com.adilhanney.saber.png
          install -Dm644 assets/icon/resized/icon-512x512.png AppDir/usr/share/icons/hicolor/512x512/apps/com.adilhanney.saber.png

          install -Dm644 flatpak/com.adilhanney.saber.desktop -t AppDir/share/applications/

          tar -C AppDir -cvf $archiveName .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Saber-Archive
          path: ${{ steps.compress.outputs.archiveName }}

      - name: Upload to GitHub release
        uses: svenstaro/upload-release-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.compress.outputs.archiveName }}

  build-flatpak:
    name: Build flatpak
    runs-on: ubuntu-latest
    needs: [build-flutter-app, get-version]
    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-22.08
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Remove unneeded files
        run: |
          rm -rf android
          rm -rf assets_raw
          rm -rf installers
          rm -rf integration_test
          rm -rf ios
          rm -rf macos
          rm -rf metadata
          rm -rf test
          rm -rf windows

      - name: Download app archive
        uses: actions/download-artifact@v3
        with:
          name: Saber-Archive

      - name: Rename app archive
        run: |
          mv Saber_*.tar.gz Saber-Linux-Portable.tar.gz

      - name: Build .flatpak
        uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v4
        with:
          bundle: Saber.flatpak
          manifest-path: flatpak/com.adilhanney.saber.json

      - name: Rename .flatpak
        id: rename
        run: |
          flatpakName="Saber_v${{ needs.get-version.outputs.buildName }}.flatpak"
          echo "flatpakName=$flatpakName" >> $GITHUB_OUTPUT

          mv Saber.flatpak $flatpakName

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Flatpak artifact
          path: ${{ steps.rename.outputs.flatpakName }}

  build-appimage:
    name: Build AppImage
    needs: [build-flutter-app, get-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Remove unneeded files
        run: |
          rm -rf android
          rm -rf assets_raw
          rm -rf installers
          rm -rf integration_test
          rm -rf ios
          rm -rf macos
          rm -rf metadata
          rm -rf test
          rm -rf windows

      - name: Install AppImage dependencies
        run: |
          sudo add-apt-repository universe
          sudo apt install libfuse2

      - name: Download app archive
        uses: actions/download-artifact@v3
        with:
          name: Saber-Archive

      - name: Rename app archive
        run: |
          mv Saber_*.tar.gz Saber-Linux-Portable.tar.gz

      - name: Download appimage-builder
        working-directory: appimage
        run: |
          wget -O appimage-builder-x86_64.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
          chmod +x appimage-builder-x86_64.AppImage

      - name: Prepare build files
        working-directory: appimage
        run: |
          mkdir AppDir
          tar -xvf ../Saber-Linux-Portable.tar.gz -C AppDir

      - name: Set AppImage version
        working-directory: appimage
        run: |
          # replace line with "version: latest" with "version: $buildName"
          sed -i "s/version: latest/version: ${{ needs.get-version.outputs.buildName }}/" AppImageBuilder.yml

      - name: Build AppImage
        working-directory: appimage
        run: |
          ./appimage-builder-x86_64.AppImage --skip-test

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: AppImage artifact
          path: appimage/Saber-*-x86_64.AppImage*

      - name: Upload to GitHub release
        uses: svenstaro/upload-release-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: appimage/Saber-*-x86_64.AppImage*
          file_glob: true
  build-snap:
    name: Build Snap
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3

      - name: Build Snap
        uses: snapcore/action-build@v1
        id: snapcraft-build
        with:
          snapcraft-args: "-v"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Snap artifact
          path: ${{ steps.snapcraft-build.outputs.snap }}
